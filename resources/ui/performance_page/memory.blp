/* ui/performance_page/memory.blp
 *
 * Copyright 2023 Romeo Calota
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

using Gtk 4.0;
using Adw 1;

template $PerformancePageMemory: Box {
  orientation: vertical;

  WindowHandle {
    child: Box description {
      hexpand: true;
      margin-bottom: 7;

      Label {
        styles [
          "title-1",
        ]

        hexpand: true;
        halign: start;

        label: _("Memory");
      }

      Label total_ram {
        styles [
          "title-3",
        ]

        halign: end;
        ellipsize: middle;
      }
    };
  }

  Adw.ToastOverlay toast_overlay {
    child: Box big_box {
      orientation: vertical;
      homogeneous: true;
      margin-bottom: 10;
      spacing: 10;

      Box mem_box {
        orientation: vertical;

        has-tooltip: true;

        Box {
          Label {
            styles [
              "caption",
            ]
            label: _("Memory usage over ");
          }

          Label graph_max_duration {
            styles [
              "caption",
            ]

            hexpand: true;
            halign: start;
            valign: start;
          }

          Label {
            styles [
              "caption",
            ]

            label: bind total_ram.label;
          }
        }

        $GraphWidget usage_graph {
          vexpand: true;
          hexpand: true;

          width-request: 100;
          height-request: 50;

          base-color: bind template.base-color;
          data-set-count: 3;
          scroll: true;
        }
      }
      Box {
        orientation: vertical;
        spacing: 10;
        Box {
          orientation: vertical;
          Box swap_box {
            Label {
              styles [
                "caption",
              ]
              label: _("Swap usage over ");
            }
            Label {
              styles [
                "caption",
              ]

              hexpand: true;
              halign: start;
              valign: start;

              label: bind graph_max_duration.label;
            }
            Label total_swap {
              styles [
                "caption",
              ]
            }
          }

          $GraphWidget swap_usage_graph {
            vexpand: true;
            hexpand: true;

            width-request: 100;
            height-request: 50;

            base-color: bind template.memory-color;
            data-set-count: 1;
            scroll: true;
          }
        }

        Box mem_composition_box {
          orientation: vertical;
          Label {
            styles [
              "caption",
            ]

            hexpand: true;
            halign: start;
            valign: start;
            label: _("Memory composition");
          }

          Adw.Clamp {
            orientation: vertical;

            width-request: 100;
            maximum-size: 50;

            child: $MemoryCompositionWidget mem_composition {
              base-color: bind template.base-color;
            };
          }
        }
      }
    };
  }

  PopoverMenu context_menu {
    has-arrow: false;
    menu-model: context_menu_model;
  }
}

menu context_menu_model {
  section {
    item {
      label: _("Show Memory Composition");
      action: "graph.memory_composition";
    }
    item {
      label: _("Show Swap Usage");
      action: "graph.swap_usage";
    }
  }

  section {
    item {
      label: _("Graph _Summary View");
      action: "graph.summary";
    }

    submenu {
      label: _("_View");

      item {
        label: _("CP_U");
        action: "graph.cpu";
      }

      item {
        label: _("_Memory");
        action: "graph.memory";
      }

      item {
        label: _("_Drive");
        action: "graph.disk";
      }

      item {
        label: _("_Network");
        action: "graph.network";
      }

      item {
        label: _("_GPU");
        action: "graph.gpu";
      }

      item {
        label: _("_Fan");
        action: "graph.fan";
      }
    }
  }

  section {
    item {
      label: _("_Copy");
      action: "graph.copy";
    }
  }
}
